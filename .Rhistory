getwd()
devtools::document()
warnings()
devtools::check()
set.seed(1468)
# pdf of standard Laplace distribution
laplace<-function(x) return(1/2*exp(-abs(x)))
rw.Metropolis <- function(sigma, x0, N) {
# N is the number of iterations
x <- numeric(N)
# x0 is the initial value
x[1] <- x0
# u determines whether accept Y as x(t+1) or not
u <- runif(N)
# k denotes the times of rejection
k <- 0
for (i in 2:N) {
# the candidate is from x[i-1] plus a normal increment ~ N(0,sigma)
y <- rnorm(1, x[i-1], sigma)
if (u[i] <= (laplace(y) / laplace(x[i-1])))
x[i] <- y else {
x[i] <- x[i-1]
k <- k + 1
}
}
return(list(x=x, k=k))
}
sigma <- c(.05, .5, 2, 16)
N=2000
x0 <- 25
rw1 <- rw.Metropolis(sigma[1], x0, N)
rw2 <- rw.Metropolis(sigma[2], x0, N)
rw3 <- rw.Metropolis(sigma[3], x0, N)
rw4 <- rw.Metropolis(sigma[4], x0, N)
#dim(t(as.matrix(rw1$x)))
par(mfrow=c(2,2))
plot(1:2000,rw1$x,type='l',ylab="x",xlab='iteration',main='sd=0.05')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw2$x,type='l',ylab="x",xlab='iteration',main='sd=0.5')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw3$x,type='l',ylab="x",xlab='iteration',main='sd=2')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw4$x,type='l',ylab="x",xlab='iteration',main='sd=16')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
accept_rate<-c(1-rw1$k/(N-1), 1-rw2$k/(N-1), 1-rw3$k/(N-1), 1-rw4$k/(N-1))
names(accept_rate)<-c('sd=0.05','sd=0.5','sd=2','sd=16')
print(accept_rate)
set.seed(1468)
# pdf of standard Laplace distribution
laplace<-function(x) return(1/2*exp(-abs(x)))
rw.Metropolis <- function(sigma, x0, N) {
# N is the number of iterations
x <- numeric(N)
# x0 is the initial value
x[1] <- x0
# u determines whether accept Y as x(t+1) or not
u <- runif(N)
# k denotes the times of rejection
k <- 0
for (i in 2:N) {
# the candidate is from x[i-1] plus a normal increment ~ N(0,sigma)
y <- rnorm(1, x[i-1], sigma)
if (u[i] <= (laplace(y) / laplace(x[i-1])))
x[i] <- y else {
x[i] <- x[i-1]
k <- k + 1
}
}
return(list(x=x, k=k))
}
sigma <- c(.05, .5, 2, 16)
N=2000
x0 <- 25
rw1 <- rw.Metropolis(sigma[1], x0, N)
rw2 <- rw.Metropolis(sigma[2], x0, N)
rw3 <- rw.Metropolis(sigma[3], x0, N)
rw4 <- rw.Metropolis(sigma[4], x0, N)
#dim(t(as.matrix(rw1$x)))
par(mfrow=c(2,2))
plot(1:2000,rw1$x,type='l',ylab="x",xlab='iteration',main='sd=0.05')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw2$x,type='l',ylab="x",xlab='iteration',main='sd=0.5')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw3$x,type='l',ylab="x",xlab='iteration',main='sd=2')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw4$x,type='l',ylab="x",xlab='iteration',main='sd=16')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
accept_rate<-c(1-rw1$k/(N-1), 1-rw2$k/(N-1), 1-rw3$k/(N-1), 1-rw4$k/(N-1))
names(accept_rate)<-c('sd=0.05','sd=0.5','sd=2','sd=16')
print(accept_rate)
Gelman.Rubin <- function(psi) {
# psi[i,j] is the statistic psi(X[i,1:j])
# for chain in i-th row of X
psi <- as.matrix(psi)
n <- ncol(psi)
k <- nrow(psi)
psi.means <- rowMeans(psi) # row means
B <- n * var(psi.means) # between variance est.
psi.w <- apply(psi, 1, "var") # within variances
W <- mean(psi.w) # within est.
v.hat <- W*(n-1)/n + (B/n) # upper variance est.
r.hat <- v.hat / W # G-R statistic
return(r.hat)
}
set.seed(1468)
# pdf of standard Laplace distribution
laplace<-function(x) return(1/2*exp(-abs(x)))
# initialization
sigma <- 2
N <- 5000
x0 <- c(5, 15, 25, 45)
k <- length(x0)
# burn-in length
b <- 800
# generate the chains
X <- matrix(0, k, N)
for (i in 1:k) {
X[i,] <- t(as.matrix(rw.Metropolis(sigma, x0[i], N)$x))
}
# compute diagnostic statistics
psi <- t(apply(X, 1, cumsum))
for (i in 1:nrow(psi)) {
psi[i,] <- psi[i,] / (1:ncol(psi))
}
print(Gelman.Rubin(psi))
# plot psi for the four chains
par(mfrow=c(2,2))
for (i in 1:k)
plot(psi[i, (b+1):N], type="l",
xlab=i, ylab=bquote(psi))
par(mfrow=c(1,1)) #restore default
# plot the sequence of R-hat statistics
rhat <- rep(0, N)
for (j in (b+1):N) rhat[j] <- Gelman.Rubin(psi[,1:j])
plot(rhat[(b+1):N], type="l", xlab="", ylab="R")
abline(h=1.2, lty=2)
library(Rcpp)
## 1.  R random number generater
# pdf of standard Laplace distribution
laplace<-function(x) return(1/2*exp(-abs(x)))
rw.Metropolis <- function(sigma, x0, N) {
# N is the number of iterations
x <- numeric(N)
# x0 is the initial value
x[1] <- x0
# u determines whether accept Y as x(t+1) or not
u <- runif(N)
# k denotes the times of rejection
k <- 0
for (i in 2:N) {
# the candidate is from x[i-1] plus a normal increment ~ N(0,sigma)
y <- rnorm(1, x[i-1], sigma)
if (u[i] <= (laplace(y) / laplace(x[i-1])))
x[i] <- y else {
x[i] <- x[i-1]
k <- k + 1
}
}
return(list(x=x, k=k))
}
## 2. C++ random number generater: function(Metropolis)
sourceCpp('G:/Grade2_S1/package/StatComp20024/src/Metropolis.cpp')
sigma <- c(.05, .5, 2, 16)
N=2000
x0 <- 25
rw1 <- rw.Metropolis(sigma[1], x0, N)
rw2 <- rw.Metropolis(sigma[2], x0, N)
rw3 <- rw.Metropolis(sigma[3], x0, N)
rw4 <- rw.Metropolis(sigma[4], x0, N)
cpp.rw1<-Metropolis(sigma[1], x0, N)
cpp.rw2<-Metropolis(sigma[2], x0, N)
cpp.rw3<-Metropolis(sigma[3], x0, N)
cpp.rw4<-Metropolis(sigma[4], x0, N)
par(mfrow=c(2,2))
plot(1:2000,rw1$x,type='l',ylab="x",xlab='iteration',main='sd=0.05(R)')
plot(1:2000,rw2$x,type='l',ylab="x",xlab='iteration',main='sd=0.5(R)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw3$x,type='l',ylab="x",xlab='iteration',main='sd=2(R)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw4$x,type='l',ylab="x",xlab='iteration',main='sd=16(R)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
par(mfrow=c(2,2))
plot(1:2000,cpp.rw1,type='l',ylab="x",xlab='iteration',main='sd=0.05(Cpp)')
plot(1:2000,cpp.rw2,type='l',ylab="x",xlab='iteration',main='sd=0.5(Cpp)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,cpp.rw3,type='l',ylab="x",xlab='iteration',main='sd=2(Cpp)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,cpp.rw4,type='l',ylab="x",xlab='iteration',main='sd=16(Cpp)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
library(Rcpp)
## 1.  R random number generater
# pdf of standard Laplace distribution
laplace<-function(x) return(1/2*exp(-abs(x)))
rw.Metropolis <- function(sigma, x0, N) {
# N is the number of iterations
x <- numeric(N)
# x0 is the initial value
x[1] <- x0
# u determines whether accept Y as x(t+1) or not
u <- runif(N)
# k denotes the times of rejection
k <- 0
for (i in 2:N) {
# the candidate is from x[i-1] plus a normal increment ~ N(0,sigma)
y <- rnorm(1, x[i-1], sigma)
if (u[i] <= (laplace(y) / laplace(x[i-1])))
x[i] <- y else {
x[i] <- x[i-1]
k <- k + 1
}
}
return(list(x=x, k=k))
}
## 2. C++ random number generater: function(Metropolis)
sourceCpp('G:/Grade2_S1/package/StatComp20024/src/Metropolis.cpp')
sigma <- c(.05, .5, 2, 16)
N=2000
x0 <- 25
rw1 <- rw.Metropolis(sigma[1], x0, N)
rw2 <- rw.Metropolis(sigma[2], x0, N)
rw3 <- rw.Metropolis(sigma[3], x0, N)
rw4 <- rw.Metropolis(sigma[4], x0, N)
cpp.rw1<-Metropolis(sigma[1], x0, N)
cpp.rw2<-Metropolis(sigma[2], x0, N)
cpp.rw3<-Metropolis(sigma[3], x0, N)
cpp.rw4<-Metropolis(sigma[4], x0, N)
# par(mfrow=c(2,2))
plot(1:2000,rw1$x,type='l',ylab="x",xlab='iteration',main='sd=0.05(R)')
plot(1:2000,rw2$x,type='l',ylab="x",xlab='iteration',main='sd=0.5(R)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw3$x,type='l',ylab="x",xlab='iteration',main='sd=2(R)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw4$x,type='l',ylab="x",xlab='iteration',main='sd=16(R)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
# par(mfrow=c(2,2))
plot(1:2000,cpp.rw1,type='l',ylab="x",xlab='iteration',main='sd=0.05(Cpp)')
plot(1:2000,cpp.rw2,type='l',ylab="x",xlab='iteration',main='sd=0.5(Cpp)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,cpp.rw3,type='l',ylab="x",xlab='iteration',main='sd=2(Cpp)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,cpp.rw4,type='l',ylab="x",xlab='iteration',main='sd=16(Cpp)')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
Gelman.Rubin <- function(psi) {
# psi[i,j] is the statistic psi(X[i,1:j])
# for chain in i-th row of X
psi <- as.matrix(psi)
n <- ncol(psi)
k <- nrow(psi)
psi.means <- rowMeans(psi) # row means
B <- n * var(psi.means) # between variance est.
psi.w <- apply(psi, 1, "var") # within variances
W <- mean(psi.w) # within est.
v.hat <- W*(n-1)/n + (B/n) # upper variance est.
r.hat <- v.hat / W # G-R statistic
return(r.hat)
}
set.seed(1468)
# pdf of standard Laplace distribution
laplace<-function(x) return(1/2*exp(-abs(x)))
# initialization
sigma <- 2
N <- 5000
x0 <- c(5, 15, 25, 45)
k <- length(x0)
# burn-in length
b <- 800
# generate the chains
X <- matrix(0, k, N)
for (i in 1:k) {
X[i,] <- t(as.matrix(rw.Metropolis(sigma, x0[i], N)$x))
}
# compute diagnostic statistics
psi <- t(apply(X, 1, cumsum))
for (i in 1:nrow(psi)) {
psi[i,] <- psi[i,] / (1:ncol(psi))
}
print(Gelman.Rubin(psi))
# plot psi for the four chains
# par(mfrow=c(2,2))
for (i in 1:k)
plot(psi[i, (b+1):N], type="l", xlab=i, ylab=bquote(psi))
# par(mfrow=c(1,1)) #restore default
# plot the sequence of R-hat statistics
rhat <- rep(0, N)
for (j in (b+1):N) rhat[j] <- Gelman.Rubin(psi[,1:j])
plot(rhat[(b+1):N], type="l", xlab="", ylab="R")
abline(h=1.2, lty=2)
set.seed(1468)
# pdf of standard Laplace distribution
laplace<-function(x) return(1/2*exp(-abs(x)))
rw.Metropolis <- function(sigma, x0, N) {
# N is the number of iterations
x <- numeric(N)
# x0 is the initial value
x[1] <- x0
# u determines whether accept Y as x(t+1) or not
u <- runif(N)
# k denotes the times of rejection
k <- 0
for (i in 2:N) {
# the candidate is from x[i-1] plus a normal increment ~ N(0,sigma)
y <- rnorm(1, x[i-1], sigma)
if (u[i] <= (laplace(y) / laplace(x[i-1])))
x[i] <- y else {
x[i] <- x[i-1]
k <- k + 1
}
}
return(list(x=x, k=k))
}
sigma <- c(.05, .5, 2, 16)
N=2000
x0 <- 25
rw1 <- rw.Metropolis(sigma[1], x0, N)
rw2 <- rw.Metropolis(sigma[2], x0, N)
rw3 <- rw.Metropolis(sigma[3], x0, N)
rw4 <- rw.Metropolis(sigma[4], x0, N)
#dim(t(as.matrix(rw1$x)))
# par(mfrow=c(2,2))
plot(1:2000,rw1$x,type='l',ylab="x",xlab='iteration',main='sd=0.05')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw2$x,type='l',ylab="x",xlab='iteration',main='sd=0.5')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw3$x,type='l',ylab="x",xlab='iteration',main='sd=2')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
plot(1:2000,rw4$x,type='l',ylab="x",xlab='iteration',main='sd=16')
abline(h=c(-3*sqrt(2),3*sqrt(2)))
accept_rate<-c(1-rw1$k/(N-1), 1-rw2$k/(N-1), 1-rw3$k/(N-1), 1-rw4$k/(N-1))
names(accept_rate)<-c('sd=0.05','sd=0.5','sd=2','sd=16')
print(accept_rate)
par(mfrow=c(2,2))
qqplot(rw1$x[500:2000],cpp.rw1[500:2000],xlab='R',ylab='cpp',main='sd=0.05')
qqplot(rw2$x[500:2000],cpp.rw2[500:2000],xlab='R',ylab='cpp',main='sd=0.5')
qqplot(rw3$x[500:2000],cpp.rw3[500:2000],xlab='R',ylab='cpp',main='sd=2')
qqplot(rw4$x[500:2000],cpp.rw4[500:2000],xlab='R',ylab='cpp',main='sd=16')
#par(mfrow=c(2,2))
qqplot(rw1$x[500:2000],cpp.rw1[500:2000],xlab='R',ylab='cpp',main='sd=0.05')
qqplot(rw2$x[500:2000],cpp.rw2[500:2000],xlab='R',ylab='cpp',main='sd=0.5')
qqplot(rw3$x[500:2000],cpp.rw3[500:2000],xlab='R',ylab='cpp',main='sd=2')
qqplot(rw4$x[500:2000],cpp.rw4[500:2000],xlab='R',ylab='cpp',main='sd=16')
#par(mfrow=c(2,2))
qqplot(rw1$x[500:2000],cpp.rw1[500:2000],xlab='R',ylab='cpp',main='sd=0.05')
qqplot(rw2$x[500:2000],cpp.rw2[500:2000],xlab='R',ylab='cpp',main='sd=0.5')
qqplot(rw3$x[500:2000],cpp.rw3[500:2000],xlab='R',ylab='cpp',main='sd=2')
qqplot(rw4$x[500:2000],cpp.rw4[500:2000],xlab='R',ylab='cpp',main='sd=16')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
install.packages("gt")
install.packages("tidyverse")
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::document()
devtools::document()
devtools::build_vignettes()
devtools::check()
devtools::document()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::build()
devtools::document()
install.packages("GeneralizedHyperbolic")
devtools::document()
devtools::build_vignettes()
devtools::check()
devtools::install_github("zhaojiayang96/StatComp20024", ref = "master", dependencies = TRUE, upgrade = "ask", build_vignettes = TRUE)
devtools::install_github("DawnGnius/SC19086", ref = "master", dependencies = TRUE, upgrade = "ask", build_vignettes = TRUE)
devtools::install_github("zhaojiayang96/StatComp20024", ref = "master", dependencies = TRUE, upgrade = "ask", build_vignettes = TRUE)
devtools::install_github("DawnGnius/SC19086", ref = "master", dependencies = TRUE, upgrade = "ask", build_vignettes = TRUE)
devtools::document()
devtools::build_vignettes()
devtools::check()
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
